import { useEffect, useRef, useState } from "react";
import useWebSocket from "../hooks/useWebSocket";

const posicioColors = {
  1: "#00913f", // verde
  2: "#2196F3", // azul
  3: "#FFEB3B", // amarillo
  4: "#9C27B0", // morado
  5: "#FF9800", // naranja
  6: "#c81d11", //rojo
};
const backendHost = import.meta.env.VITE_BACKEND_HOST_API;
export default function RiskMap({ jugadors, fase, jugadorActual }) {
  const containerRef = useRef(null);
  const selectedIdsRef = useRef(new Set());
  const socket = useWebSocket();
  const [svgContent, setSvgContent] = useState(null);
  const [myPosition, setMyPosition] = useState(null);

  const groupedCountries = new Set(["INDONESIA", "GREAT_BRITAIN"]);

  useEffect(() => {
    if (fase === "Colocacio") {
      // Permitir seleccionar territorios y colocar tropas
    }
  }, [fase]);

  useEffect(() => {
    const profileId = parseInt(localStorage.getItem("profile"), 10);
    if (!profileId || !jugadors) return;

    const jugador = jugadors.find((j) => j.jugador.id === profileId);
    if (jugador) {
      setMyPosition(jugador.posicio);
    }
  }, [jugadors]);

  useEffect(() => {
    fetch(`http://${backendHost}/assets/maps/world.svg`, { mode: "cors" })
      .then((res) => res.text())
      .then((data) => setSvgContent(data))
      .catch((err) => console.error("Error loading SVG:", err));
  }, []);

  useEffect(() => {
    if (!svgContent || !containerRef.current) return;

    const svgElement = containerRef.current.querySelector("svg");
    if (!svgElement) return;

    const paths = svgElement.querySelectorAll("path");

    // Ocultar todos los circle y text por defecto
    const circles = svgElement.querySelectorAll("circle");
    const texts = svgElement.querySelectorAll("text");

    circles.forEach(
      (circle) => {
        circle.setAttribute("r", "3");
        circle.setAttribute("fill", "black");
        circle.style.display = "none";

        circle.style.pointerEvents = "none"; // No bloquear clics
      },
      [svgContent]
    );

    texts.forEach((text) => {
      text.style.display = "none";
      text.style.pointerEvents = "none"; // No bloquear clics
    });

    const handleClick = (e) => {
      const path = e.target;
      if (path.tagName.toLowerCase() !== "path") return;

      const group = path.closest("g[id]");
      const groupId = group?.id;
      let idToUse =
        groupId && groupedCountries.has(groupId) ? groupId : path.id;

      if (!idToUse) return;

      const isSelected = selectedIdsRef.current.has(idToUse);

      if (isSelected) {
        selectedIdsRef.current.delete(idToUse);
        path.setAttribute("fill", "#ffffff"); // Desselección: blanco
      } else {
        selectedIdsRef.current.add(idToUse);
        if (groupId && groupedCountries.has(groupId)) {
          const groupPaths = group.querySelectorAll("path");
          groupPaths.forEach((p) =>
            p.setAttribute(
              "fill",
              isSelected ? "#ffffff" : posicioColors[myPosition]
            )
          );
        } else {
          path.setAttribute(
            "fill",
            isSelected ? "#ffffff" : posicioColors[myPosition]
          );
        }
        // Selección: color del jugador
      }

      console.log("Selected IDs:", Array.from(selectedIdsRef.current));
      updateStyles();
    };

    paths.forEach((path) => {
      path.addEventListener("click", handleClick);
    });

    updateStyles();

    return () => {
      paths.forEach((path) => {
        path.removeEventListener("click", handleClick);
      });
    };
  });
  useEffect(() => {
    if (!svgContent || !containerRef.current || myPosition === null) return;

    const svgElement = containerRef.current.querySelector("svg");
    if (!svgElement) return;

    // código para ocultar circles, texts...

    console.log("Calling updateStyles with myPosition:", myPosition);
    updateStyles();
  }, [svgContent, myPosition]);

  const updateStyles = () => {
    // console.log("entro");
    const svgElement = containerRef.current?.querySelector("svg");
    if (!svgElement) return;

    const allPaths = svgElement.querySelectorAll("path");
    allPaths.forEach((path) => {
      const group = path.closest("g[id]");
      const groupId = group?.id;
      const isGrouped = groupId && groupedCountries.has(groupId);
      const idToUse = isGrouped ? groupId : path.id;

      const isSelected = selectedIdsRef.current.has(idToUse);

      // Color del path
      const currentColor = path.getAttribute("fill");
      const isPlayerColor = Object.values(posicioColors).includes(currentColor);
      if (isGrouped) {
        const groupPaths = group.querySelectorAll("path");
        groupPaths.forEach((p) =>
          p.setAttribute(
            "fill",
            isSelected ? posicioColors[myPosition] : "#ffffff"
          )
        );
      } else {
        path.setAttribute(
          "fill",
          isSelected ? posicioColors[myPosition] : "#ffffff"
        );
      }

      path.setAttribute("stroke", "#333339");
      path.setAttribute("stroke-width", "0.5");

      // Mostrar u ocultar circle/text
      const circle = svgElement.querySelector(`#${idToUse}_C`);
      const text = svgElement.querySelector(`#${idToUse}_T`);

      if (circle) circle.style.display = isSelected ? "inline" : "none";
      if (text) {
        text.style.display = isSelected ? "inline" : "none";

        // AQUI PUEDO CAMBIAR EL NUMERO DE TROPAS
        const troopValue = 1;
        if (troopValue !== undefined) {
          text.textContent = troopValue.toString();
        }
      }
    });
  };
  try {
    const message = JSON.stringify({
      method: "loaded",
      data: {},
    });

    socket.send(message);
  } catch (err) {
    console.error("Error sending loaded message:", err);
  }
  return (
    <div className="absolute inset-0 flex items-start justify-center z-0">
      <div
        ref={containerRef}
        className="w-full h-full flex items-start justify-center"
        dangerouslySetInnerHTML={{ __html: svgContent }}
      />
    </div>
  );
}
